
from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import keyboard
from gpt import gpt_service

quiz_sessions = {}

quiz_prompts = {
    "quiz_science": "–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–∞—É–∫–µ —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞. –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: A)",
    "quiz_history": "–ó–∞–¥–∞–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞. –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: B)"
}

async def quiz_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∫–≤–∏–∑–∞:", reply_markup=keyboard.keyboard_quiz)

async def quiz_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    topic = callback.data

    quiz_sessions[user_id] = {"topic": topic, "score": 0, "question_count": 0}
    await ask_quiz_question(callback.message, user_id)
    await callback.answer()

async def ask_quiz_question(message: types.Message, user_id):
    if quiz_sessions[user_id]["question_count"] >= 5:
        await end_quiz(message, user_id)
        return

    topic = quiz_sessions[user_id]["topic"]
    response = await gpt_service.send_message(quiz_prompts[topic])

    lines = response.split("\n")
    question = lines[0]
    options = lines[1:5]
    correct_answer = lines[-1].replace("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", "").strip()

    quiz_sessions[user_id]["correct_answer"] = correct_answer
    quiz_sessions[user_id]["question_count"] += 1
    keyboard_ABCD = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text=options[0], callback_data="answer_A")],
        [InlineKeyboardButton(text=options[1], callback_data="answer_B")],
        [InlineKeyboardButton(text=options[2], callback_data="answer_C")],
        [InlineKeyboardButton(text=options[3], callback_data="answer_D")]
    ])
    await message.answer(f"{question} (–í–æ–ø—Ä–æ—Å {quiz_sessions[user_id]['question_count']}/5)", reply_markup=keyboard_ABCD)

async def handle_quiz_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_answer = callback.data.split("_")[1]
    correct_answer = quiz_sessions[user_id].get("correct_answer")

    if correct_answer and user_answer == correct_answer:
        quiz_sessions[user_id]["score"] += 1
        await callback.message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await callback.message.answer(f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    if quiz_sessions[user_id]["question_count"] >= 5:
        await end_quiz(callback.message, user_id)
    else:
        await callback.message.answer(f"üèÜ –¢–≤–æ–π —Å—á—ë—Ç: {quiz_sessions[user_id]['score']}", reply_markup=keyboard.keyboard_next_end)

    await callback.answer()

async def next_quiz(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await ask_quiz_question(callback.message, user_id)
    await callback.answer()

async def end_quiz(message: types.Message, user_id):
    score = quiz_sessions[user_id]["score"]
    total_questions = 5

    if score >= 3:
        result = f"–¢—ã –ø–æ–±–µ–¥–∏–ª! {score}/{total_questions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! üèÜ"
    else:
        result = f"ü§ñ ChatGPT –ø–æ–±–µ–¥–∏–ª! –¢—ã –Ω–∞–±—Ä–∞–ª {score}/{total_questions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"

    await message.answer(result)
    del quiz_sessions[user_id]  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã

async def end_callback(callback: types.CallbackQuery):
    quiz_sessions.pop(callback.from_user.id, None)
    await callback.message.answer("üèÅ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    await callback.answer()

def register_quiz_handlers(dp: Dispatcher):
    dp.callback_query.register(quiz_selection, lambda c: c.data.startswith("quiz_"))
    dp.callback_query.register(handle_quiz_answer, lambda c: c.data.startswith("answer_"))
    dp.callback_query.register(next_quiz, lambda c: c.data == "next_quiz")
    dp.callback_query.register(end_callback, lambda c: c.data == "end")


def options():
    return None